import json
from functools import reduce
from statistics import mean, stdev

from bs4 import BeautifulSoup,NavigableString
import ebooklib
from ebooklib import epub

from .SerializerABC import SerializerABC
from .util import text_to_chunks


class EpubSerializer(SerializerABC):
    def __init__(self, filename):
        self.book       = book = ebooklib.epub.read_epub(filename)
        self.title      = get_title(self.book)
        self.author     = get_author(self.book)

        self.chapters_in_chunks = []
        self.populate_chapters_in_chunks_from_book()

        self.chunks_dictionary = {}
        self.populate_chunks_dictionary()

    def populate_chapters_in_chunks_from_book(self):
        odd_lengths = find_rubbish(self.book)
        self.chapters_in_chunks = []
        for idx, document in enumerate(self.book.get_items_of_type(ebooklib.ITEM_DOCUMENT)):
            if not odd_lengths[idx]:
                chapter = get_text_from_document(document.get_content())
                self.chapters_in_chunks.append(text_to_chunks(chapter))

    def populate_chunks_dictionary(self):
        for chapter in self.chapters_in_chunks:
            for chunk in chapter:
                self.chunks_dictionary[chunk] = ""

    def get_dictionary(self):
        return self.chunks_dictionary

    def set_dictionary(self, new_dictionary):
        print(self.chunks_dictionary)
        for key, val in new_dictionary.items():
            if key in self.chunks_dictionary:
                self.chunks_dictionary[key] = val
            else:
                raise Exception(f'Wrong key found trying to set dictionary to ePubSerializer: {key, val}')

    def save_to_file(self, output_filename):
        with open(output_filename + '.json', 'w') as file:
            json.dump({
                "metadata": {"title": self.title,
                            "author": self.author},
                "dictionary": self.chunks_dictionary,
                "chapters": [{'chunks': chunks} for chunks in self.chapters_in_chunks]
                },
                file)

        # translated_chunks = map(lambda chunk: self.chunks_dictionary[chunk], self.chunks)
        # translation = ''.join(translated_chunks)
        #
        # with open(output_filename, 'w') as file:
        #     file.write(translation)


def get_title(book):
    title = book.get_metadata('DC', 'title')
    while type(title) == list or type(title) == tuple:
        title = title[0]
    return title


def get_author(book):
    author = book.get_metadata('DC', 'creator')
    while type(author) == list or type(author) == tuple:
        author = author[0]
    return author


def find_rubbish(book):
    lengths = []

    for document in book.get_items_of_type(ebooklib.ITEM_DOCUMENT):
        text = get_text_from_document(document.get_content())
        lengths.append(len(text))

    lengths_mean = mean(lengths)
    lengths_stdev = stdev(lengths)
    odd_lengths = list(map(lambda length: length < lengths_mean - 1.645 * lengths_stdev, lengths))

    return odd_lengths


def get_text_from_document(content):
    soup = BeautifulSoup(content, 'html.parser')
    for paragraph in soup('p'):
        paragraph.insert(0, NavigableString("\n"))
    return soup.get_text()
